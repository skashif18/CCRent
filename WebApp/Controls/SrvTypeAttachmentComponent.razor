
@inject NavigationManager NavigationManager

@inject IServiceTypeAttachmentRepository repository
@inject IToastService toastService
@inject IJSRuntime JsRuntime

@if (list != null)
{

    <table class="table">
        <thead>
            <tr>
                <th>Name En</th>
                <th>Name Ar</th>
                <th>Required</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in list)
            {
                <tr>
                    <td>@item.NameEn</td>
                    <td>@item.NameAr</td>
                    @if (item.IsRequired) {
                        <td>Yes</td>
                    } else {
                        <td>No</td>
                    }
                    <td>
                        <button type="button" @onclick="@(() => Edit(item))" class="btn btn-link"> <span class="oi oi-pencil text-warning"></span> </button>

                        <button type="button" @onclick="@(() => Delete(item.Id))" class="btn btn-link"> <span class="oi oi-trash text-danger"></span> </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    [CascadingParameter]
    public int ParentId { get; set; }

    private List<SrvServiceTypeAttachment> listmodel;


    List<SrvServiceTypeAttachment> list = new List<SrvServiceTypeAttachment>();


    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadList(0);

    }

    public void LoadList(int ParentId)
    {
        if (ParentId == 0)
        {
            list = repository.GetAll()?.ToList();
        }
        else
        {

            list = repository.GetByServiceTypeId(ParentId)?.ToList(); 
        }
        StateHasChanged();
    }


    private void Edit(SrvServiceTypeAttachment model)
    {
        NavigationManager.NavigateTo($"/edit-attachmenttype/{model.Id}");
    }

    private async void Delete(int Id)
    {
        bool confirmed =  await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
        if (!confirmed)
            return;

        var v = repository.Delete(Id);
        if (v.IsSuccess)
        {
            toastService.ShowSuccess(v.Message);
        }
        else
        {
            toastService.ShowError(v.Message);

         }
        LoadList(ParentId);

        LoadList(ParentId);
    }
}
