
@inject NavigationManager NavigationManager

@inject ICategoryRepository repository
@inject IToastService toastService
@inject IJSRuntime JsRuntime

@if (list != null)
{

    <table class="table">
        <thead>
            <tr>
                <th>Name En</th>
                <th>Name Ar</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in list)
            {
                <tr>
                    <td>@item.NameEn</td>
                    <td>@item.NameAr</td>
                    <td>
                        <button type="button" @onclick="@(() => Edit(item))" class="btn btn-link"> <span class="oi oi-pencil text-warning"></span> </button>

                        <button type="button" @onclick="@(() => Delete(item.Id))" class="btn btn-link"> <span class="oi oi-trash text-danger"></span> </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    [CascadingParameter]
    public int ParentId { get; set; }

    private List<SrvCategory> listmodel;


    List<SrvCategory> list = new List<SrvCategory>();


    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadList(0);
        

    }

    public void LoadList(int ParentId)
    {
        if (ParentId == 0)
        {
            list = repository.GetBaseParentAll()?.ToList();
        }
        else
        {

            list = repository.GetChildByParentId(ParentId)?.ToList(); 
        }
        StateHasChanged();
    }


    private void Edit(SrvCategory model)
    {
        NavigationManager.NavigateTo($"/edit-category/{model.Id}");
    } 

    private async void Delete(int Id)
    {
        bool confirmed =  await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
        if (!confirmed)
            return;

        repository.Delete(Id);
        LoadList(ParentId);
    }
}
