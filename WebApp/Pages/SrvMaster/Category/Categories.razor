@page "/category"
@using Syncfusion.Blazor.DropDowns
@using System.Collections.Specialized
@using System.Collections

@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject ICategoryRepository repository


<h3>Manage Categories</h3>

<EditForm Model="@ModelSave">
    <div class="card mt-3">
        <div class="card-header">
            Add Category
        </div>
        <div class="card-body">
            <div class="row">

                @for (var j = 0; j < listOfVal.Count; j++)
                {
                    <div class="col-md-6 mt-4">
                        <select class="form-control" @onchange="@((e) => getList(e,j))">
                            <option value="index_@j">Select</option>
                            @foreach (DictionaryEntry i in listOfVal[j])
                            {
                                string s = @i.Key + "_" + @j;
                                <option value="@s">@i.Value</option>

                            }
                        </select>
                    </div>
                }
            </div>
        
            <div class="row mt-4">
                <div class="col-6">
                    <input id="name" placeholder="Name English" @bind-value="ModelSave.NameEn" class="form-control" />
                </div>
                <div class="col-6">
                    <input id="nameAr" placeholder="Name Arabic" @bind-value="ModelSave.NameAr" class="form-control" />
                </div>
            </div>
           
        </div>
        <div class="card-footer">
             <div class="row mt-2 mb-3">
                <div class="col-12">
                    <button type="button" @onclick="SaveCategory" class="btn btn-warning btn-block">Add Node</button>
                </div>

            </div> 
        </div>
    </div>

</EditForm>


<CategoryListComponent ParentId="ParentId"></CategoryListComponent>

@code {

    private SrvCategory ModelSave;

    List<SrvCategory> Parentlist = new List<SrvCategory>();

    List<SrvCategory> NumOfCategory = new List<SrvCategory>();

    List<ListDictionary> listOfVal = new List<ListDictionary>();

    List<int> TrackParentId = new List<int>();

    List<int> ListOfId = new List<int>();

    public string LabelName { get; set; }

    ListDictionary myDict = new ListDictionary();

    public int ParentId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ModelSave = new SrvCategory();
        TrackParentId.Add(0);
        LoadParentlist();

    }


    private void getList(ChangeEventArgs e, int nIndex)

    {

        string s = Convert.ToString(e.Value);
        if (s.Contains("index_"))
        {
            s = s.Replace("index_", "0");
            int Index_ = Convert.ToInt32(s);
            DeleteCategories(Index_);
            TrackParentId[Index_] = 0;

        }
        else
        {
            string selectedValue = Convert.ToString(e.Value);
            string[] selectedValue1 = selectedValue.Split("_");

            nIndex = Convert.ToInt32(selectedValue1[1]);

            ParentId = Convert.ToInt32(selectedValue1[0]);
            TrackParentId[nIndex] = ParentId;

            NumOfCategory = repository.GetChildByParentId(ParentId)?.ToList();
            InitialiseCategories(nIndex);
        }

    }

    private void OnClickAdd()
    {
        NavigationManager.NavigateTo("/AddClass");
    }

    private void LoadParentlist()
    {
        NumOfCategory = repository.GetBaseParentAll()?.ToList();
        InitialiseCategories(0);
    }

    private void InitialiseCategories(int l)
    {
        DeleteCategories(l);
        myDict = new ListDictionary();
        int IsPresent = 0;
        foreach (var v in NumOfCategory)
        {
            myDict.Add(v.Id, v.NameEn);
            for (var i = 0; i < ListOfId.Count; i++)
            {
                if (v.Id == ListOfId[i])
                {
                    IsPresent = 1;
                }
            }
            if (IsPresent == 0)
            {
                ListOfId.Add(v.Id);
            }
        }
        if (myDict.Count == 0)
        {
            l = Convert.ToInt32(l);
        }
        if (myDict.Count > 0 && IsPresent == 0)
        {
            listOfVal.Add(myDict);
            TrackParentId.Add(0);

        }
    }

    private void DeleteCategories(int Index_)
    {
        for (var i = Index_ + 1; i < listOfVal.Count; i++)
        {
            for (var j = i; j < listOfVal.Count; j++)
            {
                foreach (DictionaryEntry k in listOfVal[j])
                {
                    ListOfId.Remove((int)k.Key);

                }
                TrackParentId.Remove(TrackParentId[j]);
                listOfVal.Remove(listOfVal[j]);
                j--;
            }

        }
    }

    private void SaveCategory()
    {

        if (TrackParentId[0] == 0)
        {
            ModelSave.ParentCategoryId = null;
        }
        else
        {
            int indexi = 0;
            for(var i = 0; i < TrackParentId.Count; i++)
            {
                if(TrackParentId[i] == 0)
                {
                    indexi = i - 1;
                    break;
                }
            }
            ModelSave.ParentCategoryId = Convert.ToInt32(TrackParentId[indexi]);

        }

        var v = repository.Create(ModelSave);

        if (v.IsSuccess)
        {
            toastService.ShowSuccess(v.Message + TrackParentId.Last());
        }
        else
        {
            toastService.ShowError(v.Message + TrackParentId.Last());
        }
        ModelSave = new SrvCategory();
        listOfVal = new List<ListDictionary>();
        TrackParentId = new List<int>();
        ListOfId = new List<int>();
        TrackParentId.Add(0);
        LoadParentlist();

        
    }

}
